import itertools

def tsp(graph, start):
    min_path = None
    min_dist = float('inf')

    nodes = list(graph.keys())
    nodes.remove(start)

    for perm in itertools.permutations(nodes):
        path = [start] + list(perm) + [start]
        dist = 0
        for i in range(len(path) - 1):
            dist += graph[path[i]][path[i+1]]
        if dist < min_dist:
            min_dist = dist
            min_path = path

    return min_path, min_dist

# Example graph representation as a dictionary of dictionaries (weighted adjacency matrix)
graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
}

start_node = 'A'
shortest_path, shortest_distance = tsp(graph, start_node)
print("Shortest Path:", shortest_path)
print("Shortest Distance:", shortest_distance)
