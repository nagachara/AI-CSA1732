import math

# Define constants for players
PLAYER = 1    # Maximize player
OPPONENT = -1 # Minimize player

# Define function to check if any moves are left on the board
def is_moves_left(board):
    for row in board:
        if 0 in row:
            return True
    return False

# Define function to evaluate the board
def evaluate(board):
    # Check rows for win
    for row in board:
        if sum(row) == 3:
            return 10
        elif sum(row) == -3:
            return -10
    
    # Check columns for win
    for col in range(3):
        if board[0][col] + board[1][col] + board[2][col] == 3:
            return 10
        elif board[0][col] + board[1][col] + board[2][col] == -3:
            return -10
    
    # Check diagonals for win
    if board[0][0] + board[1][1] + board[2][2] == 3 or board[0][2] + board[1][1] + board[2][0] == 3:
        return 10
    elif board[0][0] + board[1][1] + board[2][2] == -3 or board[0][2] + board[1][1] + board[2][0] == -3:
        return -10
    
    # No win
    return 0

# Define the Minimax function
def minimax(board, depth, is_max):
    score = evaluate(board)
    
    # If Maximizer has won
    if score == 10:
        return score - depth
    
    # If Minimizer has won
    if score == -10:
        return score + depth
    
    # If there are no more moves and no winner
    if not is_moves_left(board):
        return 0
    
    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = PLAYER
                    best = max(best, minimax(board, depth + 1, not is_max))
                    board[i][j] = 0
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = OPPONENT
                    best = min(best, minimax(board, depth + 1, not is_max))
                    board[i][j] = 0
        return best

# Define the function to find the best move
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                board[i][j] = PLAYER
                move_val = minimax(board, 0, False)
                board[i][j] = 0
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    
    return best_move

# Define the board
board = [
    [ 1, -1,  1],
    [ 0, -1,  0],
    [ 1,  0, -1]
]

# Find and print the best move
best_move = find_best_move(board)
print(f"The best move is: {best_move}")
